* Configure React

We'll be using the Helix library as our React wrapper of
choice and there's a reason for this.
This is only a thin layer of
Clojurescript to interact with the React API so there's
no extra complexity introduced. It is common to use Reagent
that is another Clojurescript React wrapper that introduces
it's own philosophy and quirks. For now, it's enough that
you know it exists but no need to delve any deeper at this
point.

** Installing dependencies

 The only Clojurescript dependency we need to get started with
 is Helix, add it to your dependencies in =shadow-cljs.edn= file.
 You can find the latest version from https://clojars.org/lilactown/helix.

#+begin_src clojure
  {...
   :dependencies [[binaryage/devtools "0.9.7"]
                  [cider/cider-nrepl "0.28.1"]
                  ;; React wrapper
                  [lilactown/helix "0.1.10"] ...}
#+end_src

 We also need the matching JS counterpart =react= and =react-dom=.

#+begin_src bash
$ npm install react react-dom
#+end_src

Clojurescript dependencies can be loaded dynamically but for
us to have access to the updated JS dependecies we need to
restart our development server.

** Setup React Rendering

Let's start by creating a new file =src/main/app/utils.cljs= for utility functions
where we define our render function we can use to mount
our application into the DOM.

# #+caption: utils.cljs
#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/utils.cljs src clojure

I'll explain the steps we took starting from the bottom.
Line 16 defines a render function that takes a React component
as the only argument that will be mounted as the application root
wrapped in =React.StrictMode= and then we are calling the render
method of react-root created with =react-dom/client= modules =createRoot=
function.

We get the root instance with =react-root= function defined on line =11=.
It initializes the value in the root atom we defined if the value is
not already initialized and then returning it. Clojure reference
describes atoms as:

#+begin_quote
Atoms provide a way to manage shared, synchronous, independent state.
They are a reference type like refs and vars.
...
Changes to atoms are always free of race conditions.

https://clojure.org/reference/atoms
#+end_quote

On the line =9= we define a variable =root= with defonce that defines
a variable if and only if the value is not already defined.

#+begin_src clojure
cljs.user=> (defonce once 1)
[1]
cljs.user=> (defonce once 2)
nil
#+end_src

In practice we are creating a singleton "instance" for react-root
that is accessed by calling the =react-root= function.
=helix.core/$= is a macro that creates React elements from valid types
but let's explore that a bit more in moment!
Now that we have the rendering covered we can create
the first component, =App=.

#+attr_latex: :options linenos
#+begin_src clojure
  (ns app.core
    (:require [helix.core :refer [defnc $]]
              [helix.dom :as d]
              [app.utils :as utils]))

  (defnc App []
    (d/div "This is a React component."))

  (defn ^:dev/after-load init []
    (utils/render App))
#+end_src

If VSCode is warning on the App we need to import Helix's =clj-kondo= configurations.

For this we need to create new file called =deps.edn= in the project root directory.



#+begin_src clojure
  {:deps {lilactown/helix {:mvn/version "0.1.10"}}}
#+end_src

And next we run =clj-kondo= as instructed by the documentation. https://cljdoc.org/d/clj-kondo/clj-kondo/2023.03.17/doc/configuration#importing

#+begin_src bash
  $ clj-kondo --lint "$(clojure -Spath)" --copy-configs --skip-lint
  $ clj-kondo --lint $(clojure -Spath) --dependencies --parallel
#+end_src

Here the =defnc= macro on the creates a =React.FunctionalComponent=
that we can then render with the =$= macro.
Our init function has the meta =^:dev/after-load= keyword
to tell =shadow-cljs= that whenever the source files are loaded
this should be evaluated.
The =App= components produces the same results as the following React component.

#+begin_src javascript
  const App = () => {
    return <div>This is a React component.</div>
  }
#+end_src

Evaluating our =App= creates a valid React type.

#+begin_src clojure
  => App
#+end_src

#+begin_src javascript
  function app$core$App_render(props__12584__auto__,maybe_ref__12585__auto__){
      var vec__25299 = new cljs.core.PersistentVector(
          null,
          2,
          5,
          cljs.core.PersistentVector.EMPTY_NODE,
          [helix.core.extract_cljs_props.call(
              null,
              props__12584__auto__),
           maybe_ref__12585__auto__],
          null);

      return helix
          .core
          .get_react
          .call(null)
          .createElement("div",null,"This is a React component.");
  }
#+end_src

Create a new React element from a valid React type.

#+begin_src clojure
  => ($ App)
  {"$$typeof" "Symbol(react.element)",
   "type" #object[app$core$App_render],
   "key" nil,
   "ref" nil,
   "props" #js {},
   "_owner" nil,
   "_store" #js {}}
#+end_src

And if we compare this to the JS

#+begin_src javascript
  const react = require("react");

  const App = () => {
      return react.createElement("div", null, "This is a React component");
  };

  console.log(App);
  console.log(App());

  [Function: App]
  {
    '$$typeof': Symbol(react.element),
    type: 'div',
    key: null,
    ref: null,
    props: { children: 'This is a React component' },
    _owner: null,
    _store: {}
  }
#+end_src

 We can see how these relate.

** Build an App

#+COMMENT: make this as a simple list app

TODO: layout of the app

#+begin_src markdown
  |  nav | nav    |
  | list | detail |
#+end_src

We need a navbar, listview and a detail view.

Let's start by creating the template with navigation and the content container.

TODO: Should I setup the routing from the get go. Probably!

Let's start on the navigation part.
First let's see how we can use =react-router= to define the frontend routes.

Here we'll be doing some JS/CLJS interop.

But first things first, install =react-router=

#+begin_src bash
 npm install react-routerv6
#+end_src

# #+caption: utils.cljs
#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/router.cljs src clojure

Now that we have dealt with the interop, we are ready to
define the routes and start the work on our first component, the Navbar.

# #+caption: utils.cljs
#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/nav.cljs src clojure

Here we have a simple renderer for Navlinks.
Next, Put this into play and define the routes in the =core.cljs= file.

#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/core_02.cljs src clojure

Now you should be able to have a working frontend navigation
in your application between the movies and people pages.

Let's get some data for rendering the page content.
For that we need a function to make http requests.
We'll be using the browser =fetch= for this.

#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/http.cljs src clojure

Now we are ready to make our first HTTP query!

#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/movies_01.cljs src clojure

Nobody wants to deal with managing the queries themselves
so let's just create a wrapper for the =react-query= library
to make our lives a lot easier in the long term.

#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/query.cljs src clojure

And now lets update the movielist component to use the new query wrapper

#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/movies_02.cljs src clojure

Let's add a detail view to make a dynamic view.

#+attr_latex: :options linenos
#+name: utils-cljs
#+include: app/src/main/app/movies.cljs src clojure
