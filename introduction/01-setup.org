* Introduction Clojure for React Developers

** What

 Introduce how to get started with React in Clojurescript.

** How

 Build a simple Clojurscript application

** Takeaway

 Knowledge on how to get started and setup with React in Clojure.
 Leave with a simple app in clojurescript.

* Introduce Tools

- shadow-cljs for Clojure tooling
- npm for JS tooling

* Setup project

** Create new project

Create a new project with =create-cljs-project=

#+begin_src bash
  npx create-cljs-project app
#+end_src

This sets up the basic project folder structure.
It should look like this: 

#+begin_src bash
app
├── node_modules
├── package.json
├── package-lock.json
├── shadow-cljs.edn
└── src
#+end_src

#+begin_src bash
❯ cat package.json
{
  "name": "app",
  "version": "0.0.1",
  "private": true,
  "devDependencies": {
    "shadow-cljs": "2.21.0"
  },
  "dependencies": {}
}
#+end_src

Clojure dependecies and configuration is located in =shadow-cljs.edn=

#+begin_src bash
❯ cat shadow-cljs.edn
;; shadow-cljs configuration
{:source-paths
 ["src/dev"
  "src/main"
  "src/test"]

 :dependencies
 []

 :builds
 {}}
#+end_src

** Set browser build target

Create first source file

#+begin_src bash
  ❯ mkdir src/main/app
  ❯ touch src/main/app/core.cljs
#+end_src

with the content

#+begin_src clojure
  (ns app.core)
  ;; Here we define the name for the namespace that is like a "module" in Javascript
  ;; The name `core` is used often in clojure similarly as `index.js` in Javascript

  (defn start
    "Shadow CLJS will run this code everytime on after load."
    []
    (prn "app start"))

  (defn stop
    "Shadow CLJS will run this code everytime before load."
    []
    (prn "app stop"))

  (defn init
    "This function is used in index.html to load the application."
    []
    (js/console.log "Browser loaded the code"))
#+end_src

and after this lets configure the html file to load the code

#+begin_src bash
❯ mkdir public
❯ touch public/index.html
#+end_src


#+begin_src html
<!DOCTYPE html>
<html>
    <body>
        <div id="app"/>
        <script src="/js/compiled/main.js" type="text/javascript"></script>
        <script>app.core.init();</script>
    </body>
</html>
#+end_src

And finally lets configure the build to emit the =main.js= file from Clojure sources.

#+begin_src clojure
   ;; shadow-cljs configuration
  {:source-paths ["src/dev"
                  "src/main"
                  "src/test"]

   :dependencies [;; Use Chrom(e/ium), do not work on Firefox
                  [binaryage/devtools "0.9.7"]
                  ;; This is used for interacting with the application
                  ;; from the browser. A bit more of that later.
                  [cider/cider-nrepl "0.28.1"]]

   :builds
   {:app {;; the javascript bundle is targeted to browser env
          :target     :browser
          ;; the module `:main` is written here as `main.js`
          :output-dir "public/js/compiled"
          :asset-path "/js/compiled"
          ;; modules created from Clojurescript sources
          :modules {:main {:entries [core.app]}}
          ;; set up development related configuration
          :devtools
          ;; before live-reloading any code call this function
          {:before-load core.app/stop
           ;; after live-reloading finishes call this function
           :after-load  core.app/start
           ;; serve the public directory over http at port 3000
           :http-port   3000
           :http-root   "public"
           ;; initialize devtools
           :preloads    [devtools.preload]}}}}
#+end_src

Now we can start the development server with

#+begin_src bash
  npx shadow-cljs watch app
#+end_src

#+begin_src bash
  shadow-cljs - HTTP server available at http://localhost:3000
  shadow-cljs - server version: 2.21.0 running at http://localhost:9630
  shadow-cljs - nREPL server started on port 35837
  shadow-cljs - watching build :app
  [:app] Configuring build.
  [:app] Compiling ...
  [:app] Build completed. (144 files, 0 compiled, 0 warnings, 1.83s)
#+end_src

Now we should be able to find the served index.html at =localhost:3000= and
the logging in the browsers console.

** Setup VSCode and Calva

 Lastly lets setup a connection between our application and our text editor.

 - Install =Calva= (vs code extension available)
 - =shift+ctrl+p= (mac)shift+cmd+p   > Connect to a running REPL server in your project
 - /app
 - shadow-cljs
 - :app || node-repl || brower-repl
 - =(js/alert "hello from vscode")= and press =alt+enter= (mac)/ctrl+enter

   #+begin_src clojure
     (comment

       ;; make sure that we have a connection to the browser
       (js/alert 1)

       ;; using the prefix `js/` allows us to access all the
       ;; javascript functionts and API's

       ;; for example let's get the window location
       js/document.location
       ;; => #object[Location http://localhost:3000/]

       ;; console log
       (js/console.log 123)

       ;; Interacting with the DOM from the editor
       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       ;; lets create an input element
       (def el (js/document.createElement "input"))
       ;; => [#object[HTMLInputElement [object HTMLInputElement]]]

       (set! (.-id el) "input")
       ;; => "input"

       (.appendChild (js/document.getElementById "app") el)
       ;; => #object[HTMLInputElement [object HTMLInputElement]]

       ;; Run each of them through the repl 
       ;;at this point an input element should have appeared in your browser

       ;; lets update the value of that input
       (set! (.-value el) "some value from the browser")

       ;; edit the input value in the browser

       ;; lets use browsers getElementById to read that value
       (.. (js/document.getElementById "input") -value)
       ;; => "some edited value from the browser"

       ;; Some notes on the differences between CLJS and JS




       )

   #+end_src
