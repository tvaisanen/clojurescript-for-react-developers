* Project

# We'll be creating a simple project where we use the open Star Wars API
# to fetch characters from the movies and show these characters in the browser.
# We will also setup a development environment with =devcards= to have
# a dedicated space to work on the components without having to deal with
# the application as a whole.

# On top of that we will setup unit testing with three types of test runners.
# One that we can see in the context of the component.
# Second where we have all the tests of the project in a browser view.
# Third node test runner for the that can be used withing the CI.
# And as a cherry on top we'll configure Github Actions to run tests
# and deploy the application on Github Pages on new commits.

We already created the project for the REPL exploration so let's continue with it.
The file structure should look something like this.

#+comment: Fix tree branches not showing in expoert
#+begin_src
app
├── node_modules
├── package.json
├── package-lock.json
├── shadow-cljs.edn
└── src
#+end_src

And =package.json= should have =shadow-cljs= as a dev dependency.

#+begin_src json
{
  "name": "app",
  "version": "0.0.1",
  "private": true,
  "devDependencies": {
    "shadow-cljs": "2.21.0"
  },
  "dependencies": {}
}
#+end_src

Clojure dependencies and configuration is in =shadow-cljs.edn=

#+begin_src clojure
{:source-paths
 ["src/dev"
  "src/main"
  "src/test"]

 :dependencies
 []

 :builds
 {}}
#+end_src

As the configuration shows, there's no dependencies by default nor build configurations.
To compile our source code to Javascript, we need to configure a build target.

But let's start by writing some source code to compile and creating an HTML file
to load the soon compiled javascript bundle into the browser.

#+begin_src bash
  ❯ mkdir src/main/app
  ❯ touch src/main/app/core.cljs
#+end_src

And here's some Clojurescript code for the file.

#+begin_src clojure
  (ns app.core)
  ;; Here we define the name for the namespace that is like a "module" in Javascript
  ;; The name `core` is used often in clojure similarly as `index.js` in Javascript

  (defn start
    "We'll configure this to run after loading"
    []
    (prn "app start"))

  (defn stop
    "We'll configure this to run before loading"
    []
    (prn "app stop"))

  (defn init
    "We'll configure this to be run when index.html is loaded the first time."
    []
    (js/console.log "Browser loaded the code"))
#+end_src

In the content you might have noticed the mystical =js/console.log= Just a moment...

Create the public folder to the project root and add =index.html= file into it.

#+begin_src bash
❯ mkdir public
❯ touch public/index.html
#+end_src

The index file could look like this.

#+begin_src html
<!DOCTYPE html>
<html>
    <body>
        <div id="app"/>
        <script src="/js/compiled/main.js" type="text/javascript"></script>
        <script>app.core.init();</script>
    </body>
</html>
#+end_src

** Set browser build target

And finally lets configure the build target in =shadow-cljs.edn= to emit the =main.js= file from Clojure sources.


#+begin_src clojure
   ;; shadow-cljs configuration
  {:source-paths ["src/dev"
                  "src/main"
                  "src/test"]

   :dependencies [;; Use Chrom(e/ium), do not work on Firefox
                  ;; (unless you have the latest version of Firefox
                  ;;  with custom formatters enabled
                  ;;  https://www.clojuriststogether.org/news/firefox-116.0-release/)
                  [binaryage/devtools "0.9.7"]

                  ;; This is used for interacting with the application
                  ;; from the browser. A bit more of that later.
                  [cider/cider-nrepl "0.28.1"]]

   :builds ;; https://shadow-cljs.github.io/docs/UsersGuide.html#_build_configuration
   {:app {
          ;; the javascript bundle is targeted to browser env
          :target     :browser

          ;; the module `:main` is written here as `main.js`
          :output-dir "public/js/compiled"
          :asset-path "/js/compiled"

          ;; modules created from Clojurescript sources
          :modules {:main {:entries [app.core]}}

          ;; set up development related configuration
          :devtools
          {
           ;; before live-reloading any code call this function
           :before-load app.core/stop

           ;; after live-reloading finishes call this function
           :after-load  app.core/start

           ;; serve the public directory over http at port 3000
           :http-port   3000
           :http-root   "public"

           ;; initialize devtools
           :preloads    [devtools.preload]}}}}
#+end_src

Now we are ready to start the development server.

#+begin_src bash
$ npx shadow-cljs watch app
#+end_src

#+begin_src bash
  shadow-cljs - HTTP server available at http://localhost:3000
  shadow-cljs - server version: 2.21.0 running at http://localhost:9630
  shadow-cljs - nREPL server started on port 35837
  shadow-cljs - watching build :app
  [:app] Configuring build.
  [:app] Compiling ...
  [:app] Build completed. (144 files, 0 compiled, 0 warnings, 1.83s)
#+end_src

Navigate to =localhost:3000= to load the =index.html= file to your browser
via our development server, and open up the devtools to see if everything
up and running as expexted.

** Setup VSCode and Calva

 Now we are ready to set up our editor to interact with oure application.
 Lastly lets setup a connection between our application and our text editor.

 Open the VSCode command prompt with and search for:

   #+begin_src bash
     Connect to a running REPL server in your project
   #+end_src

 Select =app=, =shadow-cljs=, =:app= when prompetd and you should be ready to go.
 You can confirm by evaluating a Clojure form in your editor.

   #+begin_src clojure
     (+ 1 1)
   #+end_src

 Move your cursor over or inside the parenthesis and press =ALT+Enter=
 and if this doesn't work on your operating system try searching the right
 command from VS code's command prompt with "Calva evaluate".

 If you see the number =2= floating around the cursor after this you've connected
 to the Clojure REPL successfully.



** Javascript Interop

 Now that we have the editor connected to the browser let's take a look
 how to talk with the browser in Clojurescript. In practice it is as simple
 as prefixing every browser's JS API command with =js/= and call the method
 as you would do in JS. For example evaluating the following code in
 should prompt the alert window in the browser.

 #+begin_src clojure
   cljs.user=> (js/alert 1)
 #+end_src

 To access values like the =document.location=

 #+begin_src clojure
 cljs.user=> js/document.location
 ;; => #object[Location http://localhost:3000/]
 #+end_src

 Or simply print values to browser console using JS =console.log= function from the REPL.

#+begin_src clojure
 cljs.user=> (js/console.log 123)
#+end_src

*** Interacting With the DOM

 Let's create an input element dynamically from our editor
 and update the DOM on the fly in the running browser.

 You can do this in the REPL or write the code in the =core.cljs=
 file and evaluate the code with Calva.

   #+begin_src clojure

     ;; lets create an input element
     (def el (js/document.createElement "input"))
     ;; => [#object[HTMLInputElement [object HTMLInputElement]]]

     (set! (.-id el) "input")
     ;; => "input"

     (.appendChild (js/document.getElementById "app") el)
     ;; => #object[HTMLInputElement [object HTMLInputElement]]

   #+end_src

   By this point you should have a new input field in the browser window.
   Next change the input's value from the editor by evaluating the following

   #+begin_src clojure
   ;; lets update the value of that input
   (set! (.-value el) "some value from the browser")
   #+end_src

   You should see the new value in the browser.. Magic!
   One last experiment, edit the input's value in the browser and
   see if you can retrieve the updated value dynamically in your editor.

   #+begin_src clojure
   (.. (js/document.getElementById "input") -value)
   ;; => "some edited value from the browser"
   #+end_src

   Voila! This is the magic behind Clojure REPL. Interacting
   with the application in real time from your editor without
   needing to refresh the whole application for every change.
   Let's continue on to the main event, setting up React rendering with Clojurescript.
