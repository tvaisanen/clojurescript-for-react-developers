* Setup tests

Add new build target called =:test= (this can be named however you choose)

This configuration will serve our tests files in the browser localhost:3001

#+begin_src clojure
  {...
   :builds {
            ....
            :test {:target           :browser-test
                   :test-dir         "out/test"
                   :devtools {:http-root "out/test"
                              :http-port 3001}
                   :compiler-options {:output-feature-set :es8}}
            }}
#+end_src



* Add firsts test

#+begin_src bash
  ❯ mkdir -p src/test/app
  ❯ touch src/test/app/starwars_test.cljs
#+end_src

#+begin_src clojure
(ns app.starwars-test
  (:require [cljs.test :refer [deftest testing is]]))

(deftest test-example
  (testing "assertion works"
    (is (= 0 1))))
#+end_src

Now if you navigate to your =localhost:3001= you should see a
view with a report of one failing test.

Now lets assume that we need to create a filter function for the starwars people
to be used in our component. Replace the =test-example= with the following.

#+begin_src clojure
(deftest filter-by-name
  (testing "filter by name works as expected"
    (let [people [{:name "Luke"} {:name "Chewbacca"} {:name "C-3PO"}]
          expected [{:name "Luke"}]]
    (is (= expected
           (sw/filter-by-name "uke" people))))))
#+end_src

And then write the implementation

#+begin_src clojure

  (ns app.starwars
    (:require ...
              [clojure.string :as str]))

  (defn filter-by-name [search people]
    (filter (fn [person]
              (str/includes? (:name person)
                             search))
            people))
#+end_src

And now you should see one passing test in the report view.

Now we want to add a input field to let the user use the filter

Let's set some visual tools to help with this.

* TODO Devcards

#+begin_src bash
  ❯ mkdir src/dev/app
  ❯ touch src/dev/app/devcards.cljs
#+end_src

#+begin_src clojure
(ns app.devcards
  (:require [devcards.core :as dc :include-macros true]
            ;; load the namespaces with devcards
            [app.starwars-test]))

(defn ^:dev/after-load start! []
  (dc/start-devcard-ui!))

(defn init! [] (start!))

(init!)
#+end_src

Add devcards to shadow-cljs dependencies for "storybook" like features.

#+begin_src clojure
  {...
   :dependencies [...
                  [devcards "0.2.5"]]
   :builds {...
            {:target           :browser
             :output-dir       "public/js/compiled"
             :asset-path       "/js/compiled"
             :compiler-options {:devcards           true
                                :output-feature-set :es8}
             :devtools {:after-load app.devcards/init!}
             :modules {:dev {:entries [app.devcards]}}}
#+end_src

Install devcards javascript dependencies.

#+begin_src bash
  ❯ npm install showdown
#+end_src

And lastly create a new html file for loading the devcards separate from the app itself.

#+begin_src html
<!DOCTYPE html>
<html>
    <body>
        <div id="app"/>
        <script src="/js/compiled/dev.js" type="text/javascript"></script>
    </body>
</html>
#+end_src
